#!/usr/bin/env node

/**
 * üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É –≤—Å–µ—Ö —É—Ä–æ–≤–Ω–µ–π –∫–µ—à–∞: Anthropic + –Ω–∞—à + –ë–î
 */

import claudeService from './src/services/ClaudeService.js';
import dbManager from './src/database/Database.js';
import dotenv from 'dotenv';

dotenv.config();

class CacheIntegrationTest {
  constructor() {
    this.claudeService = claudeService;
    this.testResults = [];
  }

  async init() {
    console.log('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    await dbManager.initialize();
    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞');
  }

  log(message, data = {}) {
    console.log(`üîç ${message}`, data);
    this.testResults.push({ message, data, timestamp: new Date() });
  }

  async runAllTests() {
    console.log('\nüöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –ö–ï–®–ò–†–û–í–ê–ù–ò–Ø\n');

    await this.init();

    // –¢–µ—Å—Ç 1: –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å (—Å–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö –∫–µ—à–µ–π)
    await this.testFirstRequest();
    
    // –¢–µ—Å—Ç 2: –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ –∫–µ—à–∞)
    await this.testOurCacheHit();
    
    // –¢–µ—Å—Ç 3: –ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è —Å —Ç–µ–º –∂–µ –ø–∞—Ü–∏–µ–Ω—Ç–æ–º
    await this.testNewSessionSamePatient();
    
    // –¢–µ—Å—Ç 4: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–µ—à–∞
    await this.testCacheStats();
    
    // –¢–µ—Å—Ç 5: –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    await this.testPerformance();
    
    this.printSummary();
  }

  async testFirstRequest() {
    this.log('\n=== –¢–ï–°–¢ 1: –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å (—Å–æ–∑–¥–∞–Ω–∏–µ –∫–µ—à–µ–π) ===');
    
    const systemPrompt = `–¢—ã –∏–≥—Ä–∞–µ—à—å —Ä–æ–ª—å –ø–∞—Ü–∏–µ–Ω—Ç–∞ –ê–Ω–Ω—ã, 28 –ª–µ—Ç, —Å –ø–∞–Ω–∏—á–µ—Å–∫–∏–º–∏ –∞—Ç–∞–∫–∞–º–∏.
    
–õ–ò–ß–ù–û–°–¢–¨: —Ç—Ä–µ–≤–æ–∂–Ω–∞—è, –ø–µ—Ä—Ñ–µ–∫—Ü–∏–æ–Ω–∏—Å—Ç–∫–∞, —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ IT.
–ü–†–û–ë–õ–ï–ú–ê: –ø–∞–Ω–∏—á–µ—Å–∫–∏–µ –∞—Ç–∞–∫–∏ –Ω–∞—á–∞–ª–∏—Å—å 3 –º–µ—Å—è—Ü–∞ –Ω–∞–∑–∞–¥ –ø–æ—Å–ª–µ —Ä–∞–∑–≤–æ–¥–∞.
–°–ò–ú–ü–¢–û–ú–´: —É—á–∞—â–µ–Ω–Ω–æ–µ —Å–µ—Ä–¥—Ü–µ–±–∏–µ–Ω–∏–µ, –ø–æ—Ç–ª–∏–≤–æ—Å—Ç—å, —Å—Ç—Ä–∞—Ö –ø–æ—Ç–µ—Ä–∏ –∫–æ–Ω—Ç—Ä–æ–ª—è.
–¶–ï–õ–¨: –Ω–∞—É—á–∏—Ç—å—Å—è —Å–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —Å —Ç—Ä–µ–≤–æ–≥–æ–π.

–û—Ç–≤–µ—á–∞–π –∫–∞–∫ –∂–∏–≤–æ–π —á–µ–ª–æ–≤–µ–∫, –Ω–µ —Ä–∞—Å–∫—Ä—ã–≤–∞–π —Å—Ä–∞–∑—É –≤—Å–µ –ø—Ä–æ–±–ª–µ–º—ã.`;

    const messages = [
      { role: 'user', content: '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ —á—Ç–æ –≤–∞—Å –±–µ—Å–ø–æ–∫–æ–∏—Ç?' }
    ];

    const startTime = Date.now();
    
    try {
      const response = await this.claudeService.sendMessage(
        messages, 
        systemPrompt,
        { 
          userId: 1001, 
          cacheType: 'conversation',
          enableCache: true 
        }
      );
      
      const responseTime = Date.now() - startTime;
      
      this.log('‚úÖ –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω', {
        responseTime: `${responseTime}ms`,
        fromCache: response.fromCache,
        usage: response.usage,
        responseLength: response.content.length,
        responsePreview: response.content.substring(0, 100) + '...'
      });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–∑–¥–∞–ª—Å—è –∫–µ—à –≤ –Ω–∞—à–µ–π –ë–î
      const cacheStats = this.claudeService.getCacheStats();
      this.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–µ—à–∞ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞', cacheStats);
      
      return response;
      
    } catch (error) {
      this.log('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞', { error: error.message });
      throw error;
    }
  }

  async testOurCacheHit() {
    this.log('\n=== –¢–ï–°–¢ 2: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ –∫–µ—à–∞ ===');
    
    // –ü–æ–≤—Ç–æ—Ä—è–µ–º —Ç–æ—á–Ω–æ —Ç–∞–∫–æ–π –∂–µ –∑–∞–ø—Ä–æ—Å
    const systemPrompt = `–¢—ã –∏–≥—Ä–∞–µ—à—å —Ä–æ–ª—å –ø–∞—Ü–∏–µ–Ω—Ç–∞ –ê–Ω–Ω—ã, 28 –ª–µ—Ç, —Å –ø–∞–Ω–∏—á–µ—Å–∫–∏–º–∏ –∞—Ç–∞–∫–∞–º–∏.
    
–õ–ò–ß–ù–û–°–¢–¨: —Ç—Ä–µ–≤–æ–∂–Ω–∞—è, –ø–µ—Ä—Ñ–µ–∫—Ü–∏–æ–Ω–∏—Å—Ç–∫–∞, —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ IT.
–ü–†–û–ë–õ–ï–ú–ê: –ø–∞–Ω–∏—á–µ—Å–∫–∏–µ –∞—Ç–∞–∫–∏ –Ω–∞—á–∞–ª–∏—Å—å 3 –º–µ—Å—è—Ü–∞ –Ω–∞–∑–∞–¥ –ø–æ—Å–ª–µ —Ä–∞–∑–≤–æ–¥–∞.
–°–ò–ú–ü–¢–û–ú–´: —É—á–∞—â–µ–Ω–Ω–æ–µ —Å–µ—Ä–¥—Ü–µ–±–∏–µ–Ω–∏–µ, –ø–æ—Ç–ª–∏–≤–æ—Å—Ç—å, —Å—Ç—Ä–∞—Ö –ø–æ—Ç–µ—Ä–∏ –∫–æ–Ω—Ç—Ä–æ–ª—è.
–¶–ï–õ–¨: –Ω–∞—É—á–∏—Ç—å—Å—è —Å–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —Å —Ç—Ä–µ–≤–æ–≥–æ–π.

–û—Ç–≤–µ—á–∞–π –∫–∞–∫ –∂–∏–≤–æ–π —á–µ–ª–æ–≤–µ–∫, –Ω–µ —Ä–∞—Å–∫—Ä—ã–≤–∞–π —Å—Ä–∞–∑—É –≤—Å–µ –ø—Ä–æ–±–ª–µ–º—ã.`;

    const messages = [
      { role: 'user', content: '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ —á—Ç–æ –≤–∞—Å –±–µ—Å–ø–æ–∫–æ–∏—Ç?' }
    ];

    const startTime = Date.now();
    
    try {
      const response = await this.claudeService.sendMessage(
        messages, 
        systemPrompt,
        { 
          userId: 1001, 
          cacheType: 'conversation',
          enableCache: true 
        }
      );
      
      const responseTime = Date.now() - startTime;
      
      this.log('‚úÖ –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω', {
        responseTime: `${responseTime}ms`,
        fromCache: response.fromCache,
        cacheHit: response.fromCache === true,
        responseLength: response.content.length
      });

      if (response.fromCache) {
        this.log('üéâ –ù–ê–® –ö–ï–® –†–ê–ë–û–¢–ê–ï–¢!', { 
          speedup: '–ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç',
          apiCallsSaved: 1
        });
      } else {
        this.log('‚ö†Ô∏è –ö–µ—à –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª', { reason: '–í–æ–∑–º–æ–∂–Ω–æ –¥—Ä—É–≥–æ–π cache key' });
      }
      
    } catch (error) {
      this.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞', { error: error.message });
    }
  }

  async testNewSessionSamePatient() {
    this.log('\n=== –¢–ï–°–¢ 3: –ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è —Å —Ç–µ–º –∂–µ –ø–∞—Ü–∏–µ–Ω—Ç–æ–º ===');
    
    const systemPrompt = `–¢—ã –∏–≥—Ä–∞–µ—à—å —Ä–æ–ª—å –ø–∞—Ü–∏–µ–Ω—Ç–∞ –ê–Ω–Ω—ã, 28 –ª–µ—Ç, —Å –ø–∞–Ω–∏—á–µ—Å–∫–∏–º–∏ –∞—Ç–∞–∫–∞–º–∏.
    
–õ–ò–ß–ù–û–°–¢–¨: —Ç—Ä–µ–≤–æ–∂–Ω–∞—è, –ø–µ—Ä—Ñ–µ–∫—Ü–∏–æ–Ω–∏—Å—Ç–∫–∞, —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ IT.
–ü–†–û–ë–õ–ï–ú–ê: –ø–∞–Ω–∏—á–µ—Å–∫–∏–µ –∞—Ç–∞–∫–∏ –Ω–∞—á–∞–ª–∏—Å—å 3 –º–µ—Å—è—Ü–∞ –Ω–∞–∑–∞–¥ –ø–æ—Å–ª–µ —Ä–∞–∑–≤–æ–¥–∞.
–°–ò–ú–ü–¢–û–ú–´: —É—á–∞—â–µ–Ω–Ω–æ–µ —Å–µ—Ä–¥—Ü–µ–±–∏–µ–Ω–∏–µ, –ø–æ—Ç–ª–∏–≤–æ—Å—Ç—å, —Å—Ç—Ä–∞—Ö –ø–æ—Ç–µ—Ä–∏ –∫–æ–Ω—Ç—Ä–æ–ª—è.
–¶–ï–õ–¨: –Ω–∞—É—á–∏—Ç—å—Å—è —Å–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —Å —Ç—Ä–µ–≤–æ–≥–æ–π.

–û—Ç–≤–µ—á–∞–π –∫–∞–∫ –∂–∏–≤–æ–π —á–µ–ª–æ–≤–µ–∫, –Ω–µ —Ä–∞—Å–∫—Ä—ã–≤–∞–π —Å—Ä–∞–∑—É –≤—Å–µ –ø—Ä–æ–±–ª–µ–º—ã.`;

    const messages = [
      { role: 'user', content: '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ —á—Ç–æ –≤–∞—Å –±–µ—Å–ø–æ–∫–æ–∏—Ç?' },
      { role: 'assistant', content: '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ... *–Ω–µ—Ä–≤–Ω–æ* –£ –º–µ–Ω—è –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —Ç–∞–∫–∏–µ —Å—Ç—Ä–∞–Ω–Ω—ã–µ –ø—Ä–∏—Å—Ç—É–ø—ã —Å–ª—É—á–∞—é—Ç—Å—è –Ω–∞ —Ä–∞–±–æ—Ç–µ.' },
      { role: 'user', content: '–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ–± —ç—Ç–∏—Ö –ø—Ä–∏—Å—Ç—É–ø–∞—Ö.' }
    ];

    const startTime = Date.now();
    
    try {
      const response = await this.claudeService.sendMessage(
        messages, 
        systemPrompt,
        { 
          userId: 1001, 
          cacheType: 'conversation',
          enableCache: true 
        }
      );
      
      const responseTime = Date.now() - startTime;
      
      this.log('‚úÖ –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ', {
        responseTime: `${responseTime}ms`,
        fromCache: response.fromCache,
        messageCount: messages.length,
        responsePreview: response.content.substring(0, 100) + '...'
      });
      
    } catch (error) {
      this.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏', { error: error.message });
    }
  }

  async testCacheStats() {
    this.log('\n=== –¢–ï–°–¢ 4: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–µ—à–∞ ===');
    
    try {
      const stats = this.claudeService.getCacheStats();
      
      this.log('üìä –ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–µ—à–∞', stats);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ë–î
      const dbStats = dbManager.getStats();
      this.log('üíæ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö', dbStats);
      
    } catch (error) {
      this.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏', { error: error.message });
    }
  }

  async testPerformance() {
    this.log('\n=== –¢–ï–°–¢ 5: –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ ===');
    
    const systemPrompt = '–¢—ã –ø—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–µ–≤—Ç. –û—Ç–≤–µ—á–∞–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ –∏ –∫—Ä–∞—Ç–∫–æ.';
    const testMessages = [
      '–ö–∞–∫ –¥–µ–ª–∞?',
      '–ß—Ç–æ –±–µ—Å–ø–æ–∫–æ–∏—Ç?',
      '–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –±–æ–ª—å—à–µ.',
      '–ü–æ–Ω—è—Ç–Ω–æ.',
      '–ß—Ç–æ –¥–∞–ª—å—à–µ?'
    ];

    const results = [];
    
    for (let i = 0; i < testMessages.length; i++) {
      const startTime = Date.now();
      
      try {
        const response = await this.claudeService.sendMessage(
          [{ role: 'user', content: testMessages[i] }],
          systemPrompt,
          { 
            userId: 1002 + i, // —Ä–∞–∑–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
            cacheType: 'conversation',
            enableCache: true 
          }
        );
        
        const responseTime = Date.now() - startTime;
        
        results.push({
          message: testMessages[i],
          responseTime,
          fromCache: response.fromCache,
          responseLength: response.content.length
        });
        
        this.log(`‚ö° –ó–∞–ø—Ä–æ—Å ${i+1}/${testMessages.length}`, {
          message: testMessages[i],
          responseTime: `${responseTime}ms`,
          cached: response.fromCache
        });
        
        // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        await new Promise(resolve => setTimeout(resolve, 1000));
        
      } catch (error) {
        this.log(`‚ùå –û—à–∏–±–∫–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ ${i+1}`, { error: error.message });
      }
    }
    
    // –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    const avgTime = results.reduce((sum, r) => sum + r.responseTime, 0) / results.length;
    const cacheHits = results.filter(r => r.fromCache).length;
    
    this.log('üìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏', {
      totalRequests: results.length,
      averageTime: `${Math.round(avgTime)}ms`,
      cacheHitRate: `${Math.round(cacheHits / results.length * 100)}%`,
      fastestRequest: `${Math.min(...results.map(r => r.responseTime))}ms`,
      slowestRequest: `${Math.max(...results.map(r => r.responseTime))}ms`
    });
  }

  printSummary() {
    console.log('\nüìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:\n');
    
    const totalTests = this.testResults.length;
    const errors = this.testResults.filter(r => r.message.includes('‚ùå')).length;
    const successes = totalTests - errors;
    
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: ${successes}/${totalTests}`);
    console.log(`‚ùå –û—à–∏–±–æ–∫: ${errors}`);
    console.log(`üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: ${Math.round(successes/totalTests*100)}%`);
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—é
    const cacheTests = this.testResults.filter(r => r.data.fromCache !== undefined);
    const cacheHits = cacheTests.filter(r => r.data.fromCache === true).length;
    
    if (cacheTests.length > 0) {
      console.log(`üéØ –ü–æ–ø–∞–¥–∞–Ω–∏–π –≤ –∫–µ—à: ${cacheHits}/${cacheTests.length}`);
      console.log(`üìä –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–µ—à–∞: ${Math.round(cacheHits/cacheTests.length*100)}%`);
    }
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞
    const timeTests = this.testResults.filter(r => r.data.responseTime);
    if (timeTests.length > 0) {
      const times = timeTests.map(r => parseInt(r.data.responseTime));
      console.log(`‚ö° –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: ${Math.round(times.reduce((a,b) => a+b, 0)/times.length)}ms`);
    }
    
    console.log('\nüéâ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
async function runIntegrationTests() {
  const tester = new CacheIntegrationTest();
  
  try {
    await tester.runAllTests();
  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
    process.exit(1);
  } finally {
    await dbManager.close();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (import.meta.url === `file://${process.argv[1]}`) {
  runIntegrationTests();
}

export default CacheIntegrationTest;