import sessionService from '../services/SessionService.js';
import userService from '../services/UserService.js';
import logger from '../utils/logger.js';

class MessageHandler {
  constructor() {
    this.userStates = new Map(); // Track user interaction states
  }

  async handleMessage(bot, msg) {
    const chatId = msg.chat.id;
    const messageText = msg.text;
    const userId = await userService.registerUser(msg.from);

    try {
      // Update user activity
      userService.updateLastActivity(userId);

      // Check for active session
      const activeSession = sessionService.getActiveSession(userId);
      
      if (!activeSession) {
        await this.handleNoActiveSession(bot, chatId);
        return;
      }

      // Handle message in session context
      await this.handleSessionMessage(bot, chatId, userId, activeSession, messageText);

    } catch (error) {
      logger.error('Message handler error', { 
        error: error.message, 
        userId, 
        messageLength: messageText?.length 
      });
      
      await bot.sendMessage(chatId, 
        '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.'
      );
    }
  }

  async handleNoActiveSession(bot, chatId) {
    const message = `
‚ùì *–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏*

–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –ø–∞—Ü–∏–µ–Ω—Ç–æ–º:
üÜï /new - –°–æ–∑–¥–∞—Ç—å —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞
üé® /custom - –°–æ–∑–¥–∞—Ç—å –ø–∞—Ü–∏–µ–Ω—Ç–∞ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é
üë• /patients - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤

üí° *–ü–æ–¥—Å–∫–∞–∑–∫–∞:* –ù–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /new –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∞—à–µ–≥–æ –ø–µ—Ä–≤–æ–≥–æ AI-–ø–∞—Ü–∏–µ–Ω—Ç–∞!
    `;

    await bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
  }

  async handleSessionMessage(bot, chatId, userId, activeSession, messageText) {
    try {
      // Validate message
      if (!messageText || messageText.trim().length === 0) {
        await bot.sendMessage(chatId, 
          'üí¨ –ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –ø–∞—Ü–∏–µ–Ω—Ç—É.'
        );
        return;
      }

      if (messageText.length > 1000) {
        await bot.sendMessage(chatId, 
          'üìù –°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª–æ–≤.'
        );
        return;
      }

      // Show typing indicator
      await bot.sendChatAction(chatId, 'typing');

      // Send message to session
      const result = await sessionService.sendMessage(
        activeSession.uuid, 
        'therapist', 
        messageText
      );

      if (result.response) {
        // Format patient response
        const patientMessage = `üë§ *${activeSession.patient.name}:*\n${result.response}`;
        
        // Add session info if it's getting long
        if (result.messageCount > 10 && result.messageCount % 5 === 0) {
          const sessionTime = Math.round((Date.now() - activeSession.startTime) / 1000 / 60);
          const infoMessage = `\n\n‚è±Ô∏è _–°–µ—Å—Å–∏—è –∏–¥–µ—Ç ${sessionTime} –º–∏–Ω | –°–æ–æ–±—â–µ–Ω–∏–π: ${result.messageCount}_`;
          await bot.sendMessage(chatId, patientMessage + infoMessage, { parse_mode: 'Markdown' });
        } else {
          await bot.sendMessage(chatId, patientMessage, { parse_mode: 'Markdown' });
        }

        // Log interaction
        logger.info('Session message exchanged', {
          sessionUuid: activeSession.uuid,
          messageCount: result.messageCount,
          responseTime: result.responseTime,
          therapistMessageLength: messageText.length,
          patientResponseLength: result.response.length
        });

        // Show helpful reminders periodically
        await this.showPeriodicReminders(bot, chatId, result.messageCount);

      } else {
        await bot.sendMessage(chatId, 
          'ü§î –ü–∞—Ü–∏–µ–Ω—Ç –∑–∞–¥—É–º–∞–ª—Å—è... –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å.'
        );
      }

    } catch (error) {
      logger.error('Session message error', { 
        error: error.message, 
        sessionUuid: activeSession.uuid 
      });

      if (error.message.includes('Rate limit')) {
        await bot.sendMessage(chatId, 
          '‚è≥ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.'
        );
      } else if (error.message.includes('API')) {
        await bot.sendMessage(chatId, 
          'üîß –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å AI. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É.'
        );
      } else {
        await bot.sendMessage(chatId, 
          '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.'
        );
      }
    }
  }

  async showPeriodicReminders(bot, chatId, messageCount) {
    const reminders = {
      5: 'üí° *–°–æ–≤–µ—Ç:* –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã.',
      10: 'üéØ *–ü–æ–¥—Å–∫–∞–∑–∫–∞:* –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç—Ä–∞–∑–∏—Ç—å —ç–º–æ—Ü–∏–∏ –ø–∞—Ü–∏–µ–Ω—Ç–∞.',
      15: '‚è∞ *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:* –ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –æ —Ü–µ–ª—è—Ö —Å–µ—Å—Å–∏–∏. –ó–∞–≤–µ—Ä—à–∏—Ç—å: /end',
      20: 'üîç *–°–æ–≤–µ—Ç:* –í–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç –ø–æ–¥–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –∏—Ç–æ–≥–∏.',
      25: '‚ö° *–ü–æ–¥—Å–∫–∞–∑–∫–∞:* –î–ª–∏–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è - —Ö–æ—Ä–æ—à–æ, –Ω–æ –Ω–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏: /end'
    };

    if (reminders[messageCount]) {
      setTimeout(async () => {
        try {
          await bot.sendMessage(chatId, reminders[messageCount], { 
            parse_mode: 'Markdown' 
          });
        } catch (error) {
          logger.error('Error sending reminder', { error: error.message });
        }
      }, 2000); // Delay to not interrupt conversation flow
    }
  }

  // Handle voice messages (future enhancement)
  async handleVoiceMessage(bot, msg) {
    const chatId = msg.chat.id;
    
    await bot.sendMessage(chatId, 
      'üéôÔ∏è –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è.\n\n' +
      '–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏.'
    );
  }

  // Handle photos/documents (future enhancement)
  async handleMedia(bot, msg) {
    const chatId = msg.chat.id;
    
    await bot.sendMessage(chatId, 
      'üìé –ú–µ–¥–∏–∞—Ñ–∞–π–ª—ã –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è.\n\n' +
      '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å –ø–∞—Ü–∏–µ–Ω—Ç–æ–º.'
    );
  }

  // Get user state for complex interactions
  getUserState(userId) {
    return this.userStates.get(userId) || { state: 'idle' };
  }

  // Set user state for complex interactions
  setUserState(userId, state) {
    this.userStates.set(userId, { 
      ...this.getUserState(userId), 
      ...state, 
      updatedAt: Date.now() 
    });
  }

  // Clear user state
  clearUserState(userId) {
    this.userStates.delete(userId);
  }

  // Handle inactivity warning with inline keyboard
  async handleInactivityWarning(bot, chatId, sessionUuid, session) {
    try {
      const warningMessage = `
‚ö†Ô∏è *–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏*

–í–∞—à–∞ —Å–µ—Å—Å–∏—è —Å –ø–∞—Ü–∏–µ–Ω—Ç–æ–º *${session.patient.name}* –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞ —É–∂–µ 5 –º–∏–Ω—É—Ç.

–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?
      `;

      const keyboard = {
        inline_keyboard: [
          [
            { 
              text: '‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å–µ—Å—Å–∏—é', 
              callback_data: `continue_session:${sessionUuid}` 
            }
          ],
          [
            { 
              text: '‚è∏Ô∏è –ü–∞—É–∑–∞ –Ω–∞ 15 –º–∏–Ω', 
              callback_data: `pause_session:${sessionUuid}:15` 
            },
            { 
              text: '‚è∏Ô∏è –ü–∞—É–∑–∞ –Ω–∞ 30 –º–∏–Ω', 
              callback_data: `pause_session:${sessionUuid}:30` 
            }
          ],
          [
            { 
              text: 'üõë –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ—Å—Å–∏—é', 
              callback_data: `end_session:${sessionUuid}` 
            }
          ]
        ]
      };

      await bot.sendMessage(chatId, warningMessage, { 
        parse_mode: 'Markdown',
        reply_markup: keyboard
      });

      logger.info('Inactivity warning sent', { sessionUuid, chatId });

    } catch (error) {
      logger.error('Error sending inactivity warning', { 
        error: error.message, 
        sessionUuid, 
        chatId 
      });
    }
  }

  // Handle session ended due to inactivity
  async handleInactivityEnd(bot, chatId, sessionUuid, session) {
    try {
      const endMessage = `
üïê *–°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏*

–í–∞—à–∞ —Å–µ—Å—Å–∏—è —Å –ø–∞—Ü–∏–µ–Ω—Ç–æ–º *${session.patient.name}* –±—ã–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏–∑-–∑–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–±–æ–ª–µ–µ 10 –º–∏–Ω—É—Ç).

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–∏:
‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${Math.round((Date.now() - session.startTime) / 1000 / 60)} –º–∏–Ω
‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π: ${session.messages.length}

üí° –í—ã –º–æ–∂–µ—Ç–µ:
üÜï /new - –ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
üìã /sessions - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–µ—Å—Å–∏–π
      `;

      await bot.sendMessage(chatId, endMessage, { parse_mode: 'Markdown' });

      logger.info('Inactivity end notification sent', { sessionUuid, chatId });

    } catch (error) {
      logger.error('Error sending inactivity end notification', { 
        error: error.message, 
        sessionUuid, 
        chatId 
      });
    }
  }

  // Handle callback queries from inline keyboards
  async handleCallbackQuery(bot, callbackQuery) {
    const chatId = callbackQuery.message.chat.id;
    const userId = callbackQuery.from.id;
    const data = callbackQuery.data;

    try {
      // Answer callback query immediately
      await bot.answerCallbackQuery(callbackQuery.id);

      // Parse callback data
      const [action, sessionUuid, ...params] = data.split(':');

      switch (action) {
        case 'continue_session':
          await this.handleContinueSessionCallback(bot, chatId, sessionUuid);
          break;

        case 'pause_session':
          const pauseMinutes = parseInt(params[0]) || 15;
          await this.handlePauseSessionCallback(bot, chatId, sessionUuid, pauseMinutes);
          break;

        case 'end_session':
          await this.handleEndSessionCallback(bot, chatId, sessionUuid, userId);
          break;

        default:
          logger.warn('Unknown callback action', { action, sessionUuid });
      }

    } catch (error) {
      logger.error('Error handling callback query', { 
        error: error.message, 
        data, 
        userId 
      });

      await bot.sendMessage(chatId, 
        '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–µ–π—Å—Ç–≤–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.'
      );
    }
  }

  // Handle continue session callback
  async handleContinueSessionCallback(bot, chatId, sessionUuid) {
    try {
      const success = await sessionService.handleContinueSession(sessionUuid);
      
      if (success) {
        await bot.sendMessage(chatId, 
          '‚úÖ *–°–µ—Å—Å–∏—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∞*\n\n–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—â–µ–Ω–∏–µ —Å –ø–∞—Ü–∏–µ–Ω—Ç–æ–º.',
          { parse_mode: 'Markdown' }
        );
      } else {
        await bot.sendMessage(chatId, 
          '‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.'
        );
      }

    } catch (error) {
      logger.error('Error continuing session', { error: error.message, sessionUuid });
      await bot.sendMessage(chatId, 
        '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏.'
      );
    }
  }

  // Handle pause session callback
  async handlePauseSessionCallback(bot, chatId, sessionUuid, pauseMinutes) {
    try {
      const pauseDuration = pauseMinutes * 60 * 1000; // Convert to milliseconds
      const success = await sessionService.handlePauseSession(sessionUuid, pauseDuration);
      
      if (success) {
        await bot.sendMessage(chatId, 
          `‚è∏Ô∏è *–°–µ—Å—Å–∏—è –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ ${pauseMinutes} –º–∏–Ω—É—Ç*\n\n` +
          '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–∏ –ø—Ä–∏–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.',
          { parse_mode: 'Markdown' }
        );
      } else {
        await bot.sendMessage(chatId, 
          '‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.'
        );
      }

    } catch (error) {
      logger.error('Error pausing session', { error: error.message, sessionUuid });
      await bot.sendMessage(chatId, 
        '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Å–µ—Å—Å–∏–∏.'
      );
    }
  }

  // Handle end session callback
  async handleEndSessionCallback(bot, chatId, sessionUuid, userId) {
    try {
      const result = await sessionService.endSession(sessionUuid, 'Ended by user via inactivity warning');
      
      const endMessage = `
üõë *–°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞*

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${result.duration} –º–∏–Ω
‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π: ${result.messageCount}

üí° –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:
üÜï /new - –ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
üìä /analyze ${result.sessionId} - –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏
üìã /sessions - –ò—Å—Ç–æ—Ä–∏—è —Å–µ—Å—Å–∏–π
      `;

      await bot.sendMessage(chatId, endMessage, { parse_mode: 'Markdown' });

    } catch (error) {
      logger.error('Error ending session', { error: error.message, sessionUuid });
      await bot.sendMessage(chatId, 
        '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏.'
      );
    }
  }

  // Cleanup old user states
  cleanupUserStates() {
    const now = Date.now();
    const maxAge = 30 * 60 * 1000; // 30 minutes

    for (const [userId, state] of this.userStates.entries()) {
      if (state.updatedAt && now - state.updatedAt > maxAge) {
        this.userStates.delete(userId);
      }
    }
  }
}

const messageHandler = new MessageHandler();

// Cleanup user states periodically
setInterval(() => {
  messageHandler.cleanupUserStates();
}, 10 * 60 * 1000); // Every 10 minutes

export default messageHandler;