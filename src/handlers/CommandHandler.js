import userService from '../services/UserService.js';
import patientService from '../services/PatientService.js';
import sessionService from '../services/SessionService.js';
import logger from '../utils/logger.js';

class CommandHandler {
  constructor() {
    this.commands = {
      '/start': this.handleStart.bind(this),
      '/help': this.handleHelp.bind(this),
      '/new': this.handleNewPatient.bind(this),
      '/custom': this.handleCustomPatient.bind(this),
      '/patients': this.handlePatients.bind(this),
      '/sessions': this.handleSessions.bind(this),
      '/stats': this.handleStats.bind(this),
      '/analyze': this.handleAnalyze.bind(this),
      '/end': this.handleEndSession.bind(this),
      '/info': this.handlePatientInfo.bind(this),
      '/leaderboard': this.handleLeaderboard.bind(this),
      '/continue': this.handleContinueSession.bind(this),
      '/settings': this.handleSettings.bind(this)
    };
  }

  async handleCommand(bot, msg) {
    const chatId = msg.chat.id;
    const command = (msg.text || '').split(' ')[0].toLowerCase();
    const args = (msg.text || '').split(' ').slice(1).join(' ');

    try {
      // Register/get user
      const userId = await userService.registerUser(msg.from);
      
      // Execute command
      if (this.commands[command]) {
        await this.commands[command](bot, msg, userId, args);
      } else {
        await bot.sendMessage(chatId, 
          '‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.'
        );
      }

    } catch (error) {
      logger.error('Command handler error', { 
        error: error.message, 
        command, 
        userId: msg.from.id 
      });
      
      await bot.sendMessage(chatId, 
        '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.'
      );
    }
  }

  async handleStart(bot, msg, userId) {
    const chatId = msg.chat.id;
    const firstName = msg.from.first_name || '–ö–æ–ª–ª–µ–≥–∞';

    const welcomeMessage = `
üéØ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ü—Å–∏—Ö–æ–¢—Ä–µ–Ω–µ—Ä v3.0!*

–ü—Ä–∏–≤–µ—Ç, ${firstName}! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Ä–∞–∑–≤–∏—Ç—å –Ω–∞–≤—ã–∫–∏ –ø—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–∏–∏ —á–µ—Ä–µ–∑ –ø—Ä–∞–∫—Ç–∏–∫—É —Å AI-–ø–∞—Ü–∏–µ–Ω—Ç–∞–º–∏.

ü§ñ *–ß—Ç–æ —è —É–º–µ—é:*
‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö AI-–ø–∞—Ü–∏–µ–Ω—Ç–æ–≤
‚Ä¢ –ü—Ä–æ–≤–æ–¥–∏—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–µ—Ä–∞–ø–µ–≤—Ç–∏—á–µ—Å–∫–∏–µ —Å–µ—Å—Å–∏–∏  
‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–≤–æ—é —Ä–∞–±–æ—Ç—É –∫–∞–∫ AI-—Å—É–ø–µ—Ä–≤–∏–∑–æ—Ä
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É

üìã *–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/new - –°–æ–∑–¥–∞—Ç—å —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞
/custom - –°–æ–∑–¥–∞—Ç—å –ø–∞—Ü–∏–µ–Ω—Ç–∞ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é
/patients - –ú–æ–∏ –ø–∞—Ü–∏–µ–Ω—Ç—ã
/sessions - –ò—Å—Ç–æ—Ä–∏—è —Å–µ—Å—Å–∏–π
/stats - –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/help - –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥

üöÄ *–ù–∞—á–Ω–∏ —Å —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /new*

üí° *–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏ –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å:*
‚Ä¢ Telegram: @YourTerapist
‚Ä¢ –ò–¥–µ–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –±–æ—Ç–∞

üí∞ *–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç:*
‚Ä¢ PayPal: [–ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É](https://paypal.me/psyazur)
‚Ä¢ –ü–æ–º–æ—á—å –∫–æ–º–ø–µ–Ω—Å–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–∫–µ–Ω—ã Claude AI
    `;

    const keyboard = {
      inline_keyboard: [
        [
          {
            text: 'üé≤ –ù–æ–≤—ã–π –ø–∞—Ü–∏–µ–Ω—Ç',
            callback_data: 'start_new_patient'
          },
          {
            text: 'üé® –ö–∞—Å—Ç–æ–º –ø–∞—Ü–∏–µ–Ω—Ç',
            callback_data: 'start_custom_patient'
          }
        ]
      ]
    };

    await bot.sendMessage(chatId, welcomeMessage, { 
      parse_mode: 'Markdown',
      reply_markup: keyboard
    });
  }

  async handleHelp(bot, msg, userId) {
    const chatId = msg.chat.id;

    const helpMessage = `
üìö *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –ü—Å–∏—Ö–æ–¢—Ä–µ–Ω–µ—Ä v3.0*

üÜï *–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤:*
/new - –°–æ–∑–¥–∞—Ç—å —Å–ª—É—á–∞–π–Ω–æ–≥–æ AI-–ø–∞—Ü–∏–µ–Ω—Ç–∞
/custom <–æ–ø–∏—Å–∞–Ω–∏–µ> - –°–æ–∑–¥–∞—Ç—å –ø–∞—Ü–∏–µ–Ω—Ç–∞ –ø–æ —Ç–≤–æ–µ–º—É –æ–ø–∏—Å–∞–Ω–∏—é

üë• *–†–∞–±–æ—Ç–∞ —Å –ø–∞—Ü–∏–µ–Ω—Ç–∞–º–∏:*
/patients - –°–ø–∏—Å–æ–∫ —Ç–≤–æ–∏—Ö –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤
/info - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º –ø–∞—Ü–∏–µ–Ω—Ç–µ
/continue - –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é

üé≠ *–°–µ—Å—Å–∏–∏:*
/sessions - –ò—Å—Ç–æ—Ä–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π
/analyze - –ü–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–µ—Å—Å–∏–∏
/end - –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é

üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*
/stats - –¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å
/leaderboard - –†–µ–π—Ç–∏–Ω–≥ —Ç–µ—Ä–∞–ø–µ–≤—Ç–æ–≤

‚ÑπÔ∏è *–ü–æ–º–æ—â—å:*
/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/start - –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞

üí° *–°–æ–≤–µ—Ç—ã:*
‚Ä¢ –í–æ –≤—Ä–µ–º—è —Å–µ—Å—Å–∏–∏ –ø—Ä–æ—Å—Ç–æ –ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è - –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–¥–∞—Å—Ç –∏—Ö –ø–∞—Ü–∏–µ–Ω—Ç—É
‚Ä¢ –ó–∞–≤–µ—Ä—à–∞–π —Å–µ—Å—Å–∏–∏ –∫–æ–º–∞–Ω–¥–æ–π /end –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞
‚Ä¢ –ò–∑—É—á–∞–π –∞–Ω–∞–ª–∏–∑—ã —Å—É–ø–µ—Ä–≤–∏–∑–æ—Ä–∞ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –Ω–∞–≤—ã–∫–æ–≤
    `;

    await bot.sendMessage(chatId, helpMessage, { parse_mode: 'Markdown' });
  }

  async handleNewPatient(bot, msg, userId) {
    const chatId = msg.chat.id;

    try {
      await bot.sendMessage(chatId, 'üîÑ –°–æ–∑–¥–∞—é —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ AI-–ø–∞—Ü–∏–µ–Ω—Ç–∞...');

      const patient = await patientService.createRandomPatient(userId);

      // Extract chief complaint from presenting_problem (not the full diagnosis)
      const chiefComplaint = patient.presenting_problem || patient.psychological_profile?.presenting_problem || '–æ–±—â–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–µ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏';

      const secretaryCallMessage = `
üìû *–ó–≤–æ–Ω–æ–∫ –æ—Ç –ï–∫–∞—Ç–µ—Ä–∏–Ω—ã (—Å–µ–∫—Ä–µ—Ç–∞—Ä—å)*

"–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –ö –≤–∞–º –∑–∞–ø–∏—Å–∞–Ω(–∞) *${patient.name}*, ${patient.age} –ª–µ—Ç.

–ü—Ä–∏ –∑–∞–ø–∏—Å–∏ –∂–∞–ª–æ–≤–∞–ª—Å—è(–∞—Å—å) –Ω–∞: _${chiefComplaint}_

–ü–∞—Ü–∏–µ–Ω—Ç —É–∂–µ –≤ –ø—Ä–∏–µ–º–Ω–æ–π. –ì–æ—Ç–æ–≤—ã –ø—Ä–∏–Ω—è—Ç—å?"
      `;

      const keyboard = {
        inline_keyboard: [[
          { text: 'üìû –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –ø–∞—Ü–∏–µ–Ω—Ç–∞', callback_data: `invite_patient_${patient.id}` }
        ]]
      };

      await bot.sendMessage(chatId, secretaryCallMessage, { 
        parse_mode: 'Markdown',
        reply_markup: keyboard
      });

      // Patient info will be retrieved from database when button is clicked

      logger.info('Patient created, waiting for invitation', { 
        userId, 
        patientId: patient.id,
        patientName: patient.name,
        patientCreatedBy: patient.created_by,
        callbackData: `invite_patient_${patient.id}`
      });

    } catch (error) {
      logger.error('Error creating new patient', { error: error.message, userId });
      await bot.sendMessage(chatId, 
        '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–∞—Ü–∏–µ–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
      );
    }
  }

  async handleCustomPatient(bot, msg, userId, description) {
    const chatId = msg.chat.id;

    // If no description provided, ask for it and set user state
    if (!description || description.trim().length < 10) {
      // Set user state to wait for patient description
      const messageHandler = await import('./MessageHandler.js');
      messageHandler.default.setUserState(userId, { 
        state: 'awaiting_patient_description',
        command: 'custom_patient'
      });

      await bot.sendMessage(chatId, 
        'üìù *–û–ø–∏—à–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞:*\n\n' +
        'üí° *–ü—Ä–∏–º–µ—Ä—ã:*\n' +
        '‚Ä¢ –ú–æ–ª–æ–¥–∞—è –∂–µ–Ω—â–∏–Ω–∞ —Å –ø–∞–Ω–∏—á–µ—Å–∫–∏–º–∏ –∞—Ç–∞–∫–∞–º–∏\n' +
        '‚Ä¢ –ü–æ–¥—Ä–æ—Å—Ç–æ–∫ —Å —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å—é\n' +
        '‚Ä¢ –ú—É–∂—á–∏–Ω–∞ —Å—Ä–µ–¥–Ω–∏—Ö –ª–µ—Ç —Å –¥–µ–ø—Ä–µ—Å—Å–∏–µ–π\n\n' +
        '‚úèÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –æ–ø–∏—Å–∞–Ω–∏–µ:'
      , { parse_mode: 'Markdown' });
      return;
    }

    try {
      await bot.sendMessage(chatId, 
        `üîÑ –°–æ–∑–¥–∞—é –ø–∞—Ü–∏–µ–Ω—Ç–∞ –ø–æ –≤–∞—à–µ–º—É –æ–ø–∏—Å–∞–Ω–∏—é...\nüí≠ "${description}"`
      );

      const patient = await patientService.createRandomPatient(userId, description);

      const patientMessage = `
‚úÖ *–ö–∞—Å—Ç–æ–º–Ω—ã–π –ø–∞—Ü–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω!*

üë§ *${patient.name}*, ${patient.age} –ª–µ—Ç
üé≠ *–ü—Ä–æ–±–ª–µ–º–∞:* ${patient.presenting_problem}

üìù *–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞:*
${patient.background.substring(0, 250)}...

üöÄ *–ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å —Å–µ—Å—Å–∏—é?*
–ù–∞–ø–∏—à–∏—Ç–µ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–∞—Ü–∏–µ–Ω—Ç—É.
      `;

      await bot.sendMessage(chatId, patientMessage, { parse_mode: 'Markdown' });

      // Create session automatically
      await sessionService.createSession(userId, patient.id);

    } catch (error) {
      logger.error('Error creating custom patient', { error: error.message, userId });
      await bot.sendMessage(chatId, 
        '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–∞—Ü–∏–µ–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–ø—Ä–æ—Å—Ç–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ.'
      );
    }
  }

  async handlePatients(bot, msg, userId) {
    const chatId = msg.chat.id;

    try {
      const patients = await patientService.getUserPatients(userId, 10);

      if (patients.length === 0) {
        await bot.sendMessage(chatId, 
          'üë• –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤.\n\n' +
          '–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤–æ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /new'
        );
        return;
      }

      let patientsMessage = '*üë• –í–∞—à–∏ –ø–∞—Ü–∏–µ–Ω—Ç—ã:*\n\n';
      
      patients.forEach((patient, index) => {
        const sessionCount = patient.session_count || 0;
        const createdDate = new Date(patient.created_at).toLocaleDateString('ru-RU');
        
        patientsMessage += `*${patient.id}* - *${patient.name}* (${patient.age} –ª–µ—Ç)\n`;
        patientsMessage += `   üé≠ ${patient.presenting_problem.substring(0, 80)}...\n`;
        patientsMessage += `   üìÖ ${createdDate} | üó£Ô∏è ${sessionCount} —Å–µ—Å—Å–∏–π\n\n`;
      });

      patientsMessage += 'üí° *–ö–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –ø–∞—Ü–∏–µ–Ω—Ç–∞–º–∏:*\n';
      patientsMessage += '‚Ä¢ –ù–∞–ø–∏—à–∏—Ç–µ ID –ø–∞—Ü–∏–µ–Ω—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: `111`)\n';
      patientsMessage += '‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏:\n';
      patientsMessage += '  - üÜï –ù–æ–≤–∞—è –≤—Å—Ç—Ä–µ—á–∞ (–ø—Ä–æ—à–ª–∞ –Ω–µ–¥–µ–ª—è)\n';
      patientsMessage += '  - üîÑ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å/–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Å—Å–∏—é\n\n';
      patientsMessage += '*–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ:* /new –∏–ª–∏ /custom <–æ–ø–∏—Å–∞–Ω–∏–µ>';

      await bot.sendMessage(chatId, patientsMessage, { parse_mode: 'Markdown' });

    } catch (error) {
      logger.error('Error fetching patients', { error: error.message, userId });
      await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤.');
    }
  }

  async handleSessions(bot, msg, userId) {
    const chatId = msg.chat.id;

    try {
      const sessions = await sessionService.getSessionHistory(userId, 10);

      if (sessions.length === 0) {
        await bot.sendMessage(chatId, 
          'üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π.\n\n' +
          '–°–æ–∑–¥–∞–π—Ç–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /new –∏ –ø—Ä–æ–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤—É—é —Å–µ—Å—Å–∏—é!'
        );
        return;
      }

      let sessionsMessage = '*üìã –ò—Å—Ç–æ—Ä–∏—è —Å–µ—Å—Å–∏–π:*\n\n';

      sessions.forEach((session, index) => {
        const date = new Date(session.started_at).toLocaleDateString('ru-RU');
        const duration = session.duration_minutes || 0;
        const rating = session.rating ? ` | ‚≠ê ${session.rating}/10` : '';
        const status = session.status === 'completed' ? '‚úÖ' : 
                      session.status === 'active' ? 'üîÑ' : '‚ùå';
        
        sessionsMessage += `${index + 1}. ${status} *${session.patient_name}*\n`;
        sessionsMessage += `   üìÖ ${date} | ‚è±Ô∏è ${duration} –º–∏–Ω${rating}\n`;
        sessionsMessage += `   üé≠ ${session.presenting_problem}\n\n`;
      });

      sessionsMessage += 'üìä *–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:* /stats';

      await bot.sendMessage(chatId, sessionsMessage, { parse_mode: 'Markdown' });

    } catch (error) {
      logger.error('Error fetching sessions', { error: error.message, userId });
      await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–µ—Å—Å–∏–π.');
    }
  }

  async handleStats(bot, msg, userId) {
    const chatId = msg.chat.id;

    try {
      const stats = await userService.getUserStats(userId);
      
      if (!stats) {
        await bot.sendMessage(chatId, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.');
        return;
      }

      const completionRate = stats.total_sessions > 0 ? 
        Math.round((stats.completed_sessions / stats.total_sessions) * 100) : 0;
      
      const avgSessionTime = stats.completed_sessions > 0 ? 
        Math.round(stats.total_session_time_minutes / stats.completed_sessions) : 0;

      let statsMessage = `*üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*\n\n`;
      statsMessage += `üéØ *–û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:*\n`;
      statsMessage += `‚Ä¢ –í—Å–µ–≥–æ —Å–µ—Å—Å–∏–π: ${stats.total_sessions}\n`;
      statsMessage += `‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: ${stats.completed_sessions} (${completionRate}%)\n`;
      statsMessage += `‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: ${stats.average_session_rating.toFixed(1)}/10\n`;
      statsMessage += `‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —Å–µ—Å—Å–∏–∏: ${avgSessionTime} –º–∏–Ω\n\n`;

      statsMessage += `üé® *–ù–∞–≤—ã–∫–∏ —Ç–µ—Ä–∞–ø–µ–≤—Ç–∞:*\n`;
      Object.entries(stats.skill_areas).forEach(([skill, level]) => {
        const skillName = this.getSkillDisplayName(skill);
        const progress = Math.min(Math.round(level / 10), 10);
        const progressBar = '‚ñà'.repeat(progress) + '‚ñë'.repeat(10 - progress);
        statsMessage += `${skillName}: ${progressBar} ${level}%\n`;
      });

      if (stats.achievements.length > 0) {
        statsMessage += `\nüèÜ *–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è (${stats.achievements.length}):*\n`;
        stats.achievements.slice(-3).forEach(achievement => {
          statsMessage += `‚Ä¢ ${achievement.name}\n`;
        });
      }

      statsMessage += `\nüìà *–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å—Å—è!* /new`;

      await bot.sendMessage(chatId, statsMessage, { parse_mode: 'Markdown' });

    } catch (error) {
      logger.error('Error fetching user stats', { error: error.message, userId });
      await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.');
    }
  }

  getSkillDisplayName(skill) {
    const skillNames = {
      active_listening: '–ê–∫—Ç–∏–≤–Ω–æ–µ —Å–ª—É—à–∞–Ω–∏–µ',
      empathy: '–≠–º–ø–∞—Ç–∏—è',
      questioning_techniques: '–¢–µ—Ö–Ω–∏–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤',
      intervention_skills: '–ò–Ω—Ç–µ—Ä–≤–µ–Ω—Ü–∏–∏',
      boundary_setting: '–ì—Ä–∞–Ω–∏—Ü—ã',
      crisis_management: '–ö—Ä–∏–∑–∏—Å-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç'
    };
    return skillNames[skill] || skill;
  }

  async handleAnalyze(bot, msg, userId) {
    const chatId = msg.chat.id;

    try {
      // Get last completed session
      const sessions = await sessionService.getSessionHistory(userId, 1);
      
      if (sessions.length === 0 || sessions[0].status !== 'completed') {
        await bot.sendMessage(chatId, 
          '‚ùå –ù–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.\n\n' +
          '–ó–∞–≤–µ—Ä—à–∏—Ç–µ —Å–µ—Å—Å–∏—é –∫–æ–º–∞–Ω–¥–æ–π /end, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏–∑.'
        );
        return;
      }

      const sessionId = sessions[0].id;
      
      await bot.sendMessage(chatId, 
        'üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à—É –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–µ—Å—Å–∏—é...\n' +
        '‚è±Ô∏è –≠—Ç–æ –∑–∞–π–º–µ—Ç –æ–∫–æ–ª–æ –º–∏–Ω—É—Ç—ã.'
      );

      const analysis = await sessionService.analyzeSession(sessionId, userId);

      let analysisMessage = `*üéì –ê–Ω–∞–ª–∏–∑ —Å–µ—Å—Å–∏–∏ –æ—Ç AI-—Å—É–ø–µ—Ä–≤–∏–∑–æ—Ä–∞*\n\n`;
      analysisMessage += `‚≠ê *–û–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥:* ${analysis.overall_rating}/10\n\n`;

      if (analysis.strengths && analysis.strengths.length > 0) {
        analysisMessage += `‚úÖ *–°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã:*\n`;
        analysis.strengths.forEach(strength => {
          analysisMessage += `‚Ä¢ ${strength}\n`;
        });
        analysisMessage += '\n';
      }

      if (analysis.areas_for_improvement && analysis.areas_for_improvement.length > 0) {
        analysisMessage += `üìà *–û–±–ª–∞—Å—Ç–∏ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è:*\n`;
        analysis.areas_for_improvement.forEach(area => {
          analysisMessage += `‚Ä¢ ${area}\n`;
        });
        analysisMessage += '\n';
      }

      if (analysis.recommendations && analysis.recommendations.length > 0) {
        analysisMessage += `üí° *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:*\n`;
        analysis.recommendations.forEach(rec => {
          analysisMessage += `‚Ä¢ ${rec}\n`;
        });
      }

      await bot.sendMessage(chatId, analysisMessage, { parse_mode: 'Markdown' });

      // Update user stats with analysis
      await userService.updateUserStats(userId, {
        completed: true,
        rating: analysis.overall_rating,
        analysis: analysis
      });

    } catch (error) {
      logger.error('Error analyzing session', { error: error.message, userId });
      await bot.sendMessage(chatId, 
        '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å–µ—Å—Å–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
      );
    }
  }

  async handleEndSession(bot, msg, userId) {
    const chatId = msg.chat.id;

    try {
      const activeSession = sessionService.getActiveSession(userId);
      
      if (!activeSession) {
        await bot.sendMessage(chatId, 
          '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏.\n\n' +
          '–°–æ–∑–¥–∞–π—Ç–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /new –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏.'
        );
        return;
      }

      await bot.sendMessage(chatId, '‚èπÔ∏è –ó–∞–≤–µ—Ä—à–∞—é —Å–µ—Å—Å–∏—é...');

      const result = await sessionService.endSession(activeSession.uuid);
      
      let endMessage = `‚úÖ *–°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!*\n\n`;
      endMessage += `üë§ *–ü–∞—Ü–∏–µ–Ω—Ç:* ${activeSession.patient.name}\n`;
      endMessage += `‚è±Ô∏è *–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:* ${result.duration} –º–∏–Ω\n`;
      endMessage += `üí¨ *–°–æ–æ–±—â–µ–Ω–∏–π:* ${result.messageCount}\n\n`;
      endMessage += `üéì *–ü–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏–∑:* /analyze\n`;
      endMessage += `üÜï *–ù–æ–≤—ã–π –ø–∞—Ü–∏–µ–Ω—Ç:* /new`;

      await bot.sendMessage(chatId, endMessage, { parse_mode: 'Markdown' });

    } catch (error) {
      logger.error('Error ending session', { error: error.message, userId });
      await bot.sendMessage(chatId, 
        '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏.'
      );
    }
  }

  async handlePatientInfo(bot, msg, userId) {
    const chatId = msg.chat.id;

    try {
      const activeSession = sessionService.getActiveSession(userId);
      
      if (!activeSession) {
        await bot.sendMessage(chatId, 
          '‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏.\n\n–°–æ–∑–¥–∞–π—Ç–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /new'
        );
        return;
      }

      const patient = activeSession.patient;
      
      let infoMessage = `*‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞—Ü–∏–µ–Ω—Ç–µ*\n\n`;
      infoMessage += `üë§ *${patient.name}*, ${patient.age} –ª–µ—Ç\n`;
      infoMessage += `üé≠ *–û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞:*\n${patient.presenting_problem}\n\n`;
      infoMessage += `üìñ *–ë–∏–æ–≥—Ä–∞—Ñ–∏—è:*\n${patient.background}\n\n`;
      
      const traits = patient.personality_traits;
      if (traits && traits.core_traits) {
        infoMessage += `üß† *–ö–ª—é—á–µ–≤—ã–µ —á–µ—Ä—Ç—ã:*\n`;
        traits.core_traits.forEach(trait => {
          infoMessage += `‚Ä¢ ${trait}\n`;
        });
      }

      await bot.sendMessage(chatId, infoMessage, { parse_mode: 'Markdown' });

    } catch (error) {
      logger.error('Error fetching patient info', { error: error.message, userId });
      await bot.sendMessage(chatId, 
        '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–∞—Ü–∏–µ–Ω—Ç–µ.'
      );
    }
  }

  async handleLeaderboard(bot, msg, userId) {
    const chatId = msg.chat.id;

    try {
      const leaderboard = await userService.getLeaderboard(10);

      if (leaderboard.length === 0) {
        await bot.sendMessage(chatId, 
          'üèÜ –†–µ–π—Ç–∏–Ω–≥ –ø–æ–∫–∞ –ø—É—Å—Ç.\n\n–ë—É–¥—å—Ç–µ –ø–µ—Ä–≤—ã–º, –∫—Ç–æ –∑–∞–≤–µ—Ä—à–∏—Ç —Å–µ—Å—Å–∏—é!'
        );
        return;
      }

      let leaderboardMessage = '*üèÜ –†–µ–π—Ç–∏–Ω–≥ —Ç–µ—Ä–∞–ø–µ–≤—Ç–æ–≤*\n\n';

      leaderboard.forEach((user, index) => {
        const medal = index === 0 ? 'ü•á' : index === 1 ? 'ü•à' : index === 2 ? 'ü•â' : `${index + 1}.`;
        leaderboardMessage += `${medal} *${user.name}*\n`;
        leaderboardMessage += `   ‚≠ê ${user.stats.average_rating} | `;
        leaderboardMessage += `üó£Ô∏è ${user.stats.completed_sessions} —Å–µ—Å—Å–∏–π | `;
        leaderboardMessage += `‚è±Ô∏è ${user.stats.total_time_hours}—á\n\n`;
      });

      leaderboardMessage += 'üìà *–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:* /stats';

      await bot.sendMessage(chatId, leaderboardMessage, { parse_mode: 'Markdown' });

    } catch (error) {
      logger.error('Error fetching leaderboard', { error: error.message, userId });
      await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ–π—Ç–∏–Ω–≥–∞.');
    }
  }

  async handleContinueSession(bot, msg, userId) {
    const chatId = msg.chat.id;

    try {
      const activeSession = sessionService.getActiveSession(userId);
      
      if (!activeSession) {
        await bot.sendMessage(chatId, 
          '‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.\n\n' +
          '–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /new'
        );
        return;
      }

      let continueMessage = `üîÑ *–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏*\n\n`;
      continueMessage += `üë§ *–ü–∞—Ü–∏–µ–Ω—Ç:* ${activeSession.patient.name}\n`;
      continueMessage += `üí¨ *–°–æ–æ–±—â–µ–Ω–∏–π:* ${activeSession.messages.length}\n`;
      continueMessage += `‚è±Ô∏è *–í—Ä–µ–º—è —Å–µ—Å—Å–∏–∏:* ${Math.round((Date.now() - activeSession.startTime) / 1000 / 60)} –º–∏–Ω\n\n`;
      continueMessage += `üí≠ –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –±–µ—Å–µ–¥—É —Å –ø–∞—Ü–∏–µ–Ω—Ç–æ–º...\n`;
      continueMessage += `‚èπÔ∏è *–ó–∞–≤–µ—Ä—à–∏—Ç—å:* /end`;

      await bot.sendMessage(chatId, continueMessage, { parse_mode: 'Markdown' });

    } catch (error) {
      logger.error('Error continuing session', { error: error.message, userId });
      await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏.');
    }
  }

  async handleSettings(bot, msg, userId) {
    const chatId = msg.chat.id;

    try {
      const settings = await userService.getUserSettings(userId);
      
      const nonverbalStatus = settings.show_nonverbal ? '‚úÖ –í–∫–ª—é—á–µ–Ω–∞' : '‚ùå –í—ã–∫–ª—é—á–µ–Ω–∞';
      const voiceStatus = settings.voice_enabled ? '‚úÖ –í–∫–ª—é—á–µ–Ω–æ' : 'üöß –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ';
      
      let settingsMessage = `‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ü—Å–∏—Ö–æ–¢—Ä–µ–Ω–µ—Ä*\n\n`;
      settingsMessage += `üé≠ *–ù–µ–≤–µ—Ä–±–∞–ª–∏–∫–∞:* ${nonverbalStatus}\n`;
      settingsMessage += `–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –ø–∞—Ü–∏–µ–Ω—Ç–∞ (*–≤–∑–¥–æ—Ö–Ω—É–ª–∞*, *–æ—Ç–≤–µ—Ä–Ω—É–ª–∞—Å—å*)\n\n`;
      settingsMessage += `üé§ *–ì–æ–ª–æ—Å–æ–≤–æ–µ –æ–±—â–µ–Ω–∏–µ:* ${voiceStatus}\n`;
      settingsMessage += `–û–±—â–µ–Ω–∏–µ —Å –ø–∞—Ü–∏–µ–Ω—Ç–æ–º –≥–æ–ª–æ—Å–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏\n\n`;
      settingsMessage += `üåê *–Ø–∑—ã–∫:* ${(settings.language_code || 'ru').toUpperCase()}\n\n`;
      settingsMessage += `üí° *–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ*`;

      const keyboard = {
        inline_keyboard: [
          [
            {
              text: settings.show_nonverbal ? 'üé≠ –í—ã–∫–ª—é—á–∏—Ç—å –Ω–µ–≤–µ—Ä–±–∞–ª–∏–∫—É' : 'üé≠ –í–∫–ª—é—á–∏—Ç—å –Ω–µ–≤–µ—Ä–±–∞–ª–∏–∫—É',
              callback_data: `settings_nonverbal_${!settings.show_nonverbal}`
            }
          ],
          [
            {
              text: 'üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ –æ–±—â–µ–Ω–∏–µ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)',
              callback_data: 'settings_voice_disabled'
            }
          ],
          [
            {
              text: 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
              callback_data: 'settings_close'
            }
          ]
        ]
      };

      await bot.sendMessage(chatId, settingsMessage, { 
        parse_mode: 'Markdown',
        reply_markup: keyboard
      });

    } catch (error) {
      logger.error('Error showing settings', { error: error.message, userId });
      await bot.sendMessage(chatId, 
        '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫.'
      );
    }
  }

  async handlePatientInvitation(bot, callbackQuery) {
    const chatId = callbackQuery.message.chat.id;
    const telegramId = callbackQuery.from.id;
    const data = callbackQuery.data;
    
    // Get internal userId from telegram ID
    const userId = await userService.registerUser(callbackQuery.from);

    try {
      // Parse callback data: invite_patient_{patientId}
      const patientId = parseInt(data.replace('invite_patient_', ''));
      
      logger.info('Processing patient invitation callback', {
        telegramId,
        userId,
        patientId,
        data,
        parsedPatientId: patientId
      });
      
      // Get patient info from database
      const patient = await patientService.getPatientById(patientId);
      
      logger.info('Patient lookup result', {
        patientId,
        patientFound: !!patient,
        patientCreatedBy: patient?.created_by,
        userId,
        accessAllowed: patient?.created_by === userId
      });
      
      if (!patient || patient.created_by !== userId) {
        logger.warn('Patient invitation rejected', {
          patientId,
          userId,
          reason: !patient ? 'patient_not_found' : 'access_denied',
          patientCreatedBy: patient?.created_by
        });
        
        await bot.answerCallbackQuery(callbackQuery.id, {
          text: '–ü–∞—Ü–∏–µ–Ω—Ç –±–æ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–≥–æ.',
          show_alert: true
        });
        return;
      }

      // Secretary response
      const secretaryResponseMessage = `
üìû *–û—Ç–≤–µ—Ç —Å–µ–∫—Ä–µ—Ç–∞—Ä—è:*

"–•–æ—Ä–æ—à–æ, –ø—Ä–∏–≥–ª–∞—à–∞—é –ø–∞—Ü–∏–µ–Ω—Ç–∞! –£–¥–∞—á–Ω–æ–π —Å–µ—Å—Å–∏–∏!"

*–°—Ç—É–∫ –≤ –¥–≤–µ—Ä—å* üö™

üë§ *–ü–∞—Ü–∏–µ–Ω—Ç –∑–∞—Ö–æ–¥–∏—Ç...*
      `;

      // Only edit message if content is different
      const currentMessage = callbackQuery.message.text;
      if (currentMessage !== secretaryResponseMessage.trim()) {
        await bot.editMessageText(secretaryResponseMessage, {
          chat_id: chatId,
          message_id: callbackQuery.message.message_id,
          parse_mode: 'Markdown'
        });
      }

      // End any existing active session
      const existingSession = sessionService.getActiveSession(userId);
      if (existingSession) {
        await sessionService.endSession(existingSession.uuid, '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞');
        logger.info('Previous session ended automatically', { 
          userId, 
          sessionUuid: existingSession.uuid 
        });
      }

      // Create session
      const session = await sessionService.createSession(userId, patient.id);
      
      // Patient enters and gives their first greeting
      // This will trigger the patient's natural first response based on their personality
      const firstMessage = await sessionService.sendMessage(session.uuid, 'therapist', '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –ø—Ä–æ—Ö–æ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.');
      
      await bot.sendMessage(chatId, `üë§ **${patient.name}:** ${firstMessage.response}`, {
        parse_mode: 'Markdown'
      });

      // Patient data retrieved from database, no cleanup needed

      // Answer callback query
      await bot.answerCallbackQuery(callbackQuery.id, {
        text: '–°–µ—Å—Å–∏—è –Ω–∞—á–∞–ª–∞—Å—å!'
      });

      logger.info('Patient invited and session started', { 
        userId, 
        patientId: patient.id, 
        sessionId: session.id 
      });

    } catch (error) {
      logger.error('Error handling patient invitation', { error: error.message, userId, data });
      await bot.answerCallbackQuery(callbackQuery.id, {
        text: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–∏ –ø–∞—Ü–∏–µ–Ω—Ç–∞',
        show_alert: true
      });
    }
  }
}

const commandHandler = new CommandHandler();
export default commandHandler;