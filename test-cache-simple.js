#!/usr/bin/env node

/**
 * üß™ –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
 * –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã Anthropic API –∏ –∫–µ—à–∞
 */

import Anthropic from '@anthropic-ai/sdk';
import dotenv from 'dotenv';

dotenv.config();

const anthropic = new Anthropic({
  apiKey: process.env.ANTHROPIC_API_KEY,
});

async function simpleTest() {
  console.log('üöÄ –ü–†–û–°–¢–û–ô –¢–ï–°–¢ ANTHROPIC API\n');

  // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª–∏–Ω–Ω–µ–µ 1024 —Ç–æ–∫–µ–Ω–æ–≤
  const longPrompt = `–¢—ã –æ–ø—ã—Ç–Ω—ã–π –ø—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–µ–≤—Ç —Å–æ —Å—Ç–∞–∂–µ–º 15 –ª–µ—Ç. –¢—ã —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—à—å—Å—è –Ω–∞ –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω–æ-–ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–æ–π —Ç–µ—Ä–∞–ø–∏–∏ –∏ —Ä–∞–±–æ—Ç–µ —Å —Ç—Ä–µ–≤–æ–∂–Ω—ã–º–∏ —Ä–∞—Å—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –ø–æ–º–æ—á—å –∫–ª–∏–µ–Ω—Ç—É –ø–æ–Ω—è—Ç—å –ø—Ä–∏—á–∏–Ω—ã –µ–≥–æ —Ç—Ä–µ–≤–æ–≥–∏ –∏ –Ω–∞—É—á–∏—Ç—å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–º —Ç–µ—Ö–Ω–∏–∫–∞–º —Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è.

–¢–í–û–ô –ü–û–î–•–û–î:
- –ó–∞–¥–∞–≤–∞–π –æ—Ç–∫—Ä—ã—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã
- –û—Ç—Ä–∞–∂–∞–π —ç–º–æ—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ 
- –ü—Ä–µ–¥–ª–∞–≥–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏ –∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
- –ë—É–¥—å —Ç–µ–ø–ª—ã–º –Ω–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º
- –§–æ–∫—É—Å–∏—Ä—É–π—Å—è –Ω–∞ –Ω–∞—Å—Ç–æ—è—â–µ–º –º–æ–º–µ–Ω—Ç–µ –∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–µ—à–µ–Ω–∏—è—Ö

–¢–ï–•–ù–ò–ö–ò –ö–û–¢–û–†–´–ï –¢–´ –ò–°–ü–û–õ–¨–ó–£–ï–®–¨:
- –ö–æ–≥–Ω–∏—Ç–∏–≤–Ω–∞—è —Ä–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏—è (—Ä–∞–±–æ—Ç–∞ —Å –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–º–∏ –º—ã—Å–ª—è–º–∏)
- –¢–µ—Ö–Ω–∏–∫–∏ –¥—ã—Ö–∞–Ω–∏—è –∏ —Ä–µ–ª–∞–∫—Å–∞—Ü–∏–∏
- –ì—Ä–∞–¥—É–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —ç–∫—Å–ø–æ–∑–∏—Ü–∏—è –¥–ª—è —Ñ–æ–±–∏–π
- –ú–∞–π–Ω–¥—Ñ—É–ª–Ω–µ—Å –∏ —Ç–µ—Ö–Ω–∏–∫–∏ –∑–∞–∑–µ–º–ª–µ–Ω–∏—è
- –ü–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã
- –î–Ω–µ–≤–Ω–∏–∫–∏ –º—ã—Å–ª–µ–π –∏ —ç–º–æ—Ü–∏–π

–û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ –Ω–æ –¥–æ—Å—Ç—É–ø–Ω–æ.`.repeat(3); // –ü–æ–≤—Ç–æ—Ä—è–µ–º 3 —Ä–∞–∑–∞ —á—Ç–æ–±—ã —Ç–æ—á–Ω–æ >1024 —Ç–æ–∫–µ–Ω–æ–≤

  console.log(`üìù –î–ª–∏–Ω–∞ –ø—Ä–æ–º–ø—Ç–∞: ${longPrompt.length} —Å–∏–º–≤–æ–ª–æ–≤ (~${Math.ceil(longPrompt.length/4)} —Ç–æ–∫–µ–Ω–æ–≤)`);

  try {
    // –¢–µ—Å—Ç 1: –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å
    console.log('\n1Ô∏è‚É£ –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å (—Å–æ–∑–¥–∞–Ω–∏–µ –∫–µ—à–∞)...');
    const start1 = Date.now();
    
    const response1 = await anthropic.messages.create({
      model: 'claude-3-5-sonnet-20241022',
      max_tokens: 300,
      system: [{
        type: 'text',
        text: longPrompt,
        cache_control: { type: 'ephemeral' }
      }],
      messages: [{
        role: 'user',
        content: '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —É –º–µ–Ω—è –ø–∞–Ω–∏—á–µ—Å–∫–∏–µ –∞—Ç–∞–∫–∏ –Ω–∞ —Ä–∞–±–æ—Ç–µ. –ß—Ç–æ –¥–µ–ª–∞—Ç—å?'
      }]
    });

    const time1 = Date.now() - start1;
    
    console.log(`‚úÖ –í—Ä–µ–º—è: ${time1}ms`);
    console.log(`üìä –¢–æ–∫–µ–Ω—ã:`, response1.usage);
    console.log(`üÜï –ö–µ—à —Å–æ–∑–¥–∞–Ω:`, response1.usage?.cache_creation_input_tokens > 0);
    console.log(`üìñ –ö–µ—à –ø—Ä–æ—á–∏—Ç–∞–Ω:`, response1.usage?.cache_read_input_tokens > 0);
    console.log(`üí¨ –û—Ç–≤–µ—Ç: ${response1.content[0]?.text?.substring(0, 150)}...`);

    // –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã
    await new Promise(resolve => setTimeout(resolve, 2000));

    // –¢–µ—Å—Ç 2: –í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å (–¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–µ—à)
    console.log('\n2Ô∏è‚É£ –í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–µ—à–∞)...');
    const start2 = Date.now();
    
    const response2 = await anthropic.messages.create({
      model: 'claude-3-5-sonnet-20241022',
      max_tokens: 300,
      system: [{
        type: 'text',
        text: longPrompt, // –¢–æ—Ç –∂–µ –ø—Ä–æ–º–ø—Ç
        cache_control: { type: 'ephemeral' }
      }],
      messages: [{
        role: 'user',
        content: '–ê –∫–∞–∫ —á–∞—Å—Ç–æ —Ç–∞–∫–æ–µ —Å–ª—É—á–∞–µ—Ç—Å—è —É –ª—é–¥–µ–π?'
      }]
    });

    const time2 = Date.now() - start2;
    
    console.log(`‚úÖ –í—Ä–µ–º—è: ${time2}ms`);
    console.log(`üìä –¢–æ–∫–µ–Ω—ã:`, response2.usage);
    console.log(`üÜï –ö–µ—à —Å–æ–∑–¥–∞–Ω:`, response2.usage?.cache_creation_input_tokens > 0);
    console.log(`üìñ –ö–µ—à –ø—Ä–æ—á–∏—Ç–∞–Ω:`, response2.usage?.cache_read_input_tokens > 0);
    console.log(`üí¨ –û—Ç–≤–µ—Ç: ${response2.content[0]?.text?.substring(0, 150)}...`);

    // –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    console.log('\nüìä –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:');
    
    if (response2.usage?.cache_read_input_tokens > 0) {
      console.log('üéâ –ö–ï–®–ò–†–û–í–ê–ù–ò–ï –†–ê–ë–û–¢–ê–ï–¢!');
      console.log(`üí∞ –°—ç–∫–æ–Ω–æ–º–ª–µ–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: ${response2.usage.cache_read_input_tokens}`);
      console.log(`‚ö° –£—Å–∫–æ—Ä–µ–Ω–∏–µ: ${Math.round((time1/time2)*100)}%`);
      
      const savedCost = response2.usage.cache_read_input_tokens * 0.003 * 0.9 / 1000;
      console.log(`üíµ –≠–∫–æ–Ω–æ–º–∏—è: $${savedCost.toFixed(6)}`);
    } else {
      console.log('‚ùå –ö–µ—à –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª');
      if (response2.usage?.cache_creation_input_tokens > 0) {
        console.log('‚ö†Ô∏è –ö–µ—à –ø–µ—Ä–µ—Å–æ–∑–¥–∞–ª—Å—è (–≤–æ–∑–º–æ–∂–Ω–æ –∏—Å—Ç–µ–∫)');
      }
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    
    if (error.message.includes('cache_control')) {
      console.log('üí° –í–æ–∑–º–æ–∂–Ω–æ Prompt Caching –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –≤–∞—à–µ–≥–æ API –∫–ª—é—á–∞');
    }
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
if (import.meta.url === `file://${process.argv[1]}`) {
  simpleTest();
}